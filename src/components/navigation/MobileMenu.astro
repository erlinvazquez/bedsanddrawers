---
import type { Category } from '../../data/categories';
import { getLocaleFromUrl, useTranslations } from '../../i18n/utils';
import type { Locale } from '../../consts';
import { navigationLinks } from '../../utils/navigation';

interface Props {
  categories: Category[];
}

const { categories } = Astro.props;
const { pathname } = Astro.url;
const currentLocale = getLocaleFromUrl(pathname);
const t = useTranslations(currentLocale);
const links = navigationLinks[currentLocale as keyof typeof navigationLinks];
---

<div class="sm:hidden">
  <button
    type="button"
    class="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500"
    aria-controls="mobile-menu"
    aria-expanded="false"
    id="mobile-menu-button"
  >
    <span class="sr-only">Open main menu</span>
    <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>

  <div class="hidden w-full absolute left-0 top-16 bg-white border-b border-gray-200" id="mobile-menu">
    <div class="pt-2 pb-3 space-y-1">
      <a
        href={`/${currentLocale}/`}
        class="block pl-3 pr-4 py-2 border-l-4 border-transparent text-base font-medium text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800"
      >
        {t('nav.home')}
      </a>
      {
        links.map((link) => (
          <a
            href={link.href}
            class="block pl-3 pr-4 py-2 border-l-4 border-transparent text-base font-medium text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800"
          >
            {link.name}
          </a>
        ))
      }
    </div>
  </div>
</div>

<script>
  const button = document.getElementById('mobile-menu-button');
  const menu = document.getElementById('mobile-menu');
  let isOpen = false;

  button?.addEventListener('click', () => {
    isOpen = !isOpen;
    button.setAttribute('aria-expanded', isOpen.toString());
    menu?.classList.toggle('hidden');
  });

  // Close menu when clicking outside
  document.addEventListener('click', (event) => {
    if (isOpen && !button?.contains(event.target as Node) && !menu?.contains(event.target as Node)) {
      isOpen = false;
      button?.setAttribute('aria-expanded', 'false');
      menu?.classList.add('hidden');
    }
  });
</script>
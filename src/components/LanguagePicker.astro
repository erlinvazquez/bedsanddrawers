---
import { LANGUAGES } from '../consts';
import { getLocaleFromUrl } from '../i18n/utils';
import { URL_SEGMENTS } from '../i18n/urls';

const { pathname } = Astro.url;
const currentLocale = getLocaleFromUrl(pathname);

// Get the current path segments
const pathSegments = pathname.split('/').filter(Boolean);
const [_, currentCategory, currentSubcategory] = pathSegments;

// Function to ensure trailing slash
function ensureTrailingSlash(url: string): string {
  return url.endsWith('/') ? url : `${url}/`;
}

// Function to get localized URL for a different language
function getLocalizedUrl(targetLocale: string) {
  let url: string;

  if (pathSegments.length === 1) {
    // If we're on the homepage, just change the language
    url = `/${targetLocale}`;
  } else if (currentCategory) {
    // For category and subcategory pages, translate the slugs
    // First, get the original slugs by looking up the current localized versions
    const reverseSegments: { [key: string]: string } = {};
    Object.entries(URL_SEGMENTS[currentLocale]).forEach(([original, localized]) => {
      reverseSegments[localized] = original;
    });

    // Get original slugs
    const originalCategorySlug = reverseSegments[currentCategory] || currentCategory;
    const originalSubcategorySlug = currentSubcategory ? (reverseSegments[currentSubcategory] || currentSubcategory) : null;

    // Get localized versions for the target language
    const targetLocalizedCategorySlug = URL_SEGMENTS[targetLocale][originalCategorySlug] || originalCategorySlug;
    
    if (originalSubcategorySlug) {
      const targetLocalizedSubcategorySlug = URL_SEGMENTS[targetLocale][originalSubcategorySlug] || originalSubcategorySlug;
      url = `/${targetLocale}/${targetLocalizedCategorySlug}/${targetLocalizedSubcategorySlug}`;
    } else {
      url = `/${targetLocale}/${targetLocalizedCategorySlug}`;
    }
  } else {
    // For any other pages, keep the rest of the path
    url = `/${targetLocale}${pathname.replace(/^\/[^/]+/, '')}`;
  }

  // Ensure trailing slash
  return ensureTrailingSlash(url);
}

// Log for debugging
console.log('Language Picker Debug:', {
  pathname,
  pathSegments,
  currentLocale,
  currentCategory,
  currentSubcategory,
  exampleUrl: getLocalizedUrl('es')
});
---

<div 
  x-data="{ open: false }"
  x-cloak
  class="relative inline-block text-left"
>
  <button
    type="button"
    @click="open = !open"
    class="inline-flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded-md"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <svg class="w-5 h-5 text-gray-500" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      <path d="M2 12H22" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      <path d="M12 2C14.5013 4.73835 15.9228 8.29203 16 12C15.9228 15.708 14.5013 19.2616 12 22C9.49872 19.2616 8.07725 15.708 8 12C8.07725 8.29203 9.49872 4.73835 12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
    <span>{LANGUAGES[currentLocale].name}</span>
  </button>

  <div
    x-show="open"
    @click.outside="open = false"
    class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {Object.entries(LANGUAGES).map(([locale, { name }]) => (
        <a
          href={getLocalizedUrl(locale)}
          class={`
            block px-4 py-2 text-sm
            ${currentLocale === locale ? 'bg-gray-100 text-gray-900' : 'text-gray-700 hover:bg-gray-50'}
            focus:bg-gray-100 focus:text-gray-900 focus:outline-none
          `}
          role="menuitem"
          tabindex="-1"
          @click="open = false"
        >
          {name}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  import 'alpinejs';
</script>

<style>
  [x-cloak] {
    display: none !important;
  }
</style>

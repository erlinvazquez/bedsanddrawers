---
import { useTranslations } from '../i18n/utils';
import type { Product } from '../types/categories';

// Sample trending products data with additional location info
const trendingProducts = [
  {
    id: 'luxury-platform-bed',
    name: 'Modern Platform Bed',
    location: 'Miami, Florida',
    image: 'https://images.unsplash.com/photo-1505693416388-ac5ce068fe85',
    price: 599.99,
    rating: 4.8,
    distance: '130 miles away',
    dates: 'Jan 24 – 29',
    affiliateLink: 'https://amazon.com/dp/example1'
  },
  {
    id: 'storage-drawer-set',
    name: 'Premium Storage Drawer Set',
    location: 'Atlanta, Georgia',
    image: 'https://images.unsplash.com/photo-1595428774223-ef52624120d2',
    price: 399.99,
    rating: 4.7,
    distance: '534 miles away',
    dates: 'Dec 16 – 21',
    affiliateLink: 'https://amazon.com/dp/example2'
  },
  {
    id: 'adjustable-bed-frame',
    name: 'Adjustable Bed Frame',
    location: 'Charleston, South Carolina',
    image: 'https://images.unsplash.com/photo-1505693314120-0d443867891c',
    price: 799.99,
    rating: 4.9,
    distance: '594 miles away',
    dates: 'Dec 14 – 19',
    affiliateLink: 'https://amazon.com/dp/example3'
  },
  {
    id: 'murphy-bed-system',
    name: 'Space-Saving Murphy Bed',
    location: 'Key West, Florida',
    image: 'https://images.unsplash.com/photo-1505691938895-1758d7feb511',
    price: 899.99,
    rating: 4.6,
    distance: '704 miles away',
    dates: 'Jan 2 – 7',
    affiliateLink: 'https://amazon.com/dp/example4'
  },
  {
    id: 'queen-bed-frame',
    name: 'Elegant Queen Bed Frame',
    location: 'Naples, Florida',
    image: 'https://images.unsplash.com/photo-1505692952047-1a78307da8f2',
    price: 749.99,
    rating: 4.7,
    distance: '583 miles away',
    dates: 'Dec 16 – 21',
    affiliateLink: 'https://amazon.com/dp/example5'
  }
];

interface Props {
  locale: string;
}

const { locale } = Astro.props;
const t = useTranslations(locale);
---

<div class="bg-white py-16">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <h2 class="text-3xl font-extrabold tracking-tight text-gray-900 mb-8">
      {t('home.trending.title')}
    </h2>
    
    <div class="relative">
      <div class="absolute left-0 top-[40%] -translate-y-1/2 -translate-x-3 z-10">
        <button
          id="prev-btn"
          class="group p-2 rounded-full bg-white hover:bg-gray-100 transition-colors border border-gray-300 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
          aria-label="View previous items"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke-width="2.5" 
            stroke="currentColor" 
            class="w-4 h-4 text-gray-600 group-hover:text-gray-900"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
          </svg>
          <span class="sr-only">Previous</span>
        </button>
      </div>

      <div class="absolute right-0 top-[40%] -translate-y-1/2 translate-x-3 z-10">
        <button
          id="next-btn"
          class="group p-2 rounded-full bg-white hover:bg-gray-100 transition-colors border border-gray-300 shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
          aria-label="View next items"
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke-width="2.5" 
            stroke="currentColor" 
            class="w-4 h-4 text-gray-600 group-hover:text-gray-900"
          >
            <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
          </svg>
          <span class="sr-only">Next</span>
        </button>
      </div>

      <div class="relative overflow-hidden px-2">
        <div
          id="products-container"
          class="flex gap-6 transition-transform duration-300 ease-in-out"
          style="transform: translateX(0px);"
          role="region"
          aria-label="Product carousel"
        >
          {trendingProducts.map((product) => (
            <div 
              class="flex-none w-[300px]"
              role="group"
              aria-label={`${product.name} in ${product.location}`}
            >
              <div class="group relative">
                <div class="relative">
                  <div class="aspect-[4/3] w-full overflow-hidden rounded-xl bg-gray-200">
                    <img
                      src={product.image}
                      alt={`View of ${product.name}`}
                      class="h-full w-full object-cover object-center"
                    />
                  </div>
                </div>
                <div class="mt-3">
                  <div class="flex justify-between items-start">
                    <div>
                      <h3 class="font-medium text-base text-gray-900">
                        {product.location}
                      </h3>
                      <p class="text-sm text-gray-500">{product.distance}</p>
                      <p class="text-sm text-gray-500">{product.dates}</p>
                      <p class="mt-1 text-sm">
                        <span class="font-semibold">${product.price}</span>
                        <span class="text-gray-500"> night</span>
                      </p>
                    </div>
                    <div class="flex items-center gap-1">
                      <svg class="w-4 h-4 text-gray-900" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                        <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
                      </svg>
                      <span class="font-medium text-sm">{product.rating}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  const container = document.getElementById('products-container');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  
  if (container && prevBtn && nextBtn) {
    let currentPosition = 0;
    const itemWidth = 324; // 300px width + 24px gap
    const visibleItems = Math.floor(container.parentElement!.offsetWidth / itemWidth);
    const maxPosition = Math.max(0, (container.children.length - visibleItems) * itemWidth);

    const updateButtons = () => {
      const isAtStart = currentPosition === 0;
      const isAtEnd = currentPosition >= maxPosition;
      
      prevBtn.disabled = isAtStart;
      nextBtn.disabled = isAtEnd;
      prevBtn.style.opacity = isAtStart ? '0.5' : '1';
      nextBtn.style.opacity = isAtEnd ? '0.5' : '1';
      
      // Update ARIA labels
      prevBtn.setAttribute('aria-disabled', isAtStart.toString());
      nextBtn.setAttribute('aria-disabled', isAtEnd.toString());
    };

    const scroll = (direction: 'prev' | 'next') => {
      if (direction === 'prev') {
        currentPosition = Math.max(currentPosition - itemWidth, 0);
      } else {
        currentPosition = Math.min(currentPosition + itemWidth, maxPosition);
      }
      container.style.transform = `translateX(-${currentPosition}px)`;
      updateButtons();
      
      // Announce the change to screen readers
      const announcement = direction === 'prev' ? 'Showing previous items' : 'Showing next items';
      container.setAttribute('aria-label', `Product carousel. ${announcement}`);
    };

    // Add keyboard navigation
    const handleKeydown = (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft') {
        scroll('prev');
      } else if (e.key === 'ArrowRight') {
        scroll('next');
      }
    };

    prevBtn.addEventListener('click', () => scroll('prev'));
    nextBtn.addEventListener('click', () => scroll('next'));
    document.addEventListener('keydown', handleKeydown);

    // Initialize button states
    updateButtons();

    // Update on window resize
    window.addEventListener('resize', () => {
      const newVisibleItems = Math.floor(container.parentElement!.offsetWidth / itemWidth);
      const newMaxPosition = Math.max(0, (container.children.length - newVisibleItems) * itemWidth);
      currentPosition = Math.min(currentPosition, newMaxPosition);
      container.style.transform = `translateX(-${currentPosition}px)`;
      updateButtons();
    });
  }
</script>
